/*
 * Copyright (C) 2021 Finn Herzfeld
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import org.gradle.nativeplatform.platform.internal.ArchitectureInternal
import org.gradle.nativeplatform.platform.internal.OperatingSystemInternal
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
import org.xml.sax.SAXParseException

plugins {
   id 'de.fuerstenau.buildconfig' version '1.1.8'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

mainClassName = 'io.finn.signald.Main'

compileJava.options.encoding = 'UTF-8'

// crappy rust target detection
static String getTarget() {
    String target = System.getenv("SIGNALD_TARGET") // Allow overriding the architecture
    if(target != null) {
        System.out.println("skipping target detection, using " + target)
        return target
    }

    String first = null
    String second = null
    String third = null

    ArchitectureInternal arch = DefaultNativePlatform.getCurrentArchitecture()
    switch(arch.getName()) {
        case ["x86_64", "x64", "x86-64"]:  // based on https://github.com/wasmerio/wasmer-java/blob/d1fc32347b206f28ddaf48896267a9740770323e/build.gradle#L79-L82
            first = "x86_64"
        break
        case "aarch64":
            first = "aarch64"
        break
        case "arm-v7":
            first = "armv7"
        break
    }

    OperatingSystemInternal os = DefaultNativePlatform.getCurrentOperatingSystem()
    if(os.isLinux()) {
        second = "unknown-linux"
        if(arch.getName() == "arm-v7") {
            third = "gnueabihf"
        } else {
            third = "gnu"
        }
    }

    if(os.isMacOsX()) {
        second = "apple"
        third = "darwin"
    }

    if(first == null || second == null || third == null) {
        throw new Exception("Unable to detect architecture." +
                "\n * os: " + os.getName() +
                "\n * arch: " + arch.getName() +
                "\n * linux: " + os.isLinux() ? "yes" : "no" +
                "\n * osx:" + os.isMacOsX() ? "yes": "no" +
                "\n\n Set environment variable SIGNALD_TARGET to force a target" +
                "\n See https://gitlab.com/signald/signald/-/merge_requests/44")
    }
    target = first + "-" + second + "-" + third
    System.out.println("detected build target: " + target + " (arch=" + arch.getName() + " os=" + os.getName() +")")
    return target
}

repositories {
    maven {url "https://gitlab.com/api/v4/groups/6853927/-/packages/maven"} // https://gitlab.com/groups/signald/-/packages
    maven {url "https://plugins.gradle.org/m2/"}
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-tests/java')
        }
        resources.srcDir file('src/integration-tests/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntimeOnly
}

dependencies {
    implementation 'com.github.turasa:signal-service-java-' + getTarget() + ':2.15.3_unofficial_27'
    implementation 'org.bouncycastle:bcprov-jdk15on:1.66'
    implementation 'com.kohlschutter.junixsocket:junixsocket-common:2.3.2'
    implementation 'com.kohlschutter.junixsocket:junixsocket-native-common:2.3.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.0'
    implementation 'org.slf4j:slf4j-nop:1.8.0-beta4'
    implementation 'info.picocli:picocli:4.5.2'
    implementation 'org.xerial:sqlite-jdbc:3.34.0'
    implementation 'org.flywaydb:flyway-core:7.5.3'
    implementation 'com.google.protobuf:protobuf-javalite:3.10.0'
    implementation 'io.prometheus:simpleclient:0.11.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.11.0'
    implementation 'io.prometheus:simpleclient_httpserver:0.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'
}


buildConfig {
  packageName = "io.finn.signald"
  version = System.getenv("VERSION") ?: "unversioned"
  appName = System.getenv("CI_PROJECT_NAME") ?: "signald"

  buildConfigField 'String', "ERROR_REPORTING_URL", "https://gitlab.com/signald/signald/-/issues/new"

  buildConfigField 'String', 'BRANCH', { System.getenv("CI_BUILD_REF_NAME") ?: "" }
  buildConfigField 'String', 'COMMIT', { System.getenv("CI_COMMIT_SHA") ?: "" }

  buildConfigField 'String', 'USER_AGENT', { System.getenv("USER_AGENT") ?: "signald-" + version }
  buildConfigField 'String', 'SIGNAL_AGENT', { System.getenv("SIGNAL_AGENT") ?: "signald" }

  // Parameters for the default server to provision new accounts with, if not specified in the protocol.
  // the server UUID is internal to signald, must be changed if any other server values are changed.
  buildConfigField 'String', "DEFAULT_SERVER_UUID", { System.getenv("DEFAULT_SERVER_UUID") ?: "6e2eb5a8-5706-45d0-8377-127a816411a4" }
  buildConfigField 'String', 'SIGNAL_URL', { System.getenv("SIGNAL_URL") ?: "https://chat.signal.org" }
  buildConfigField 'String', 'SIGNAL_CDN_URL', { System.getenv("SIGNAL_CDN_URL") ?: "https://cdn.signal.org" }
  buildConfigField 'String', 'SIGNAL_CDN2_URL', { System.getenv("SIGNAL_CDN_URL") ?: "https://cdn2.signal.org" }
  buildConfigField 'String', 'SIGNAL_KEY_BACKUP_URL', { System.getenv("SIGNAL_KEY_BACKUP_URL") ?: "https://api.backup.signal.org" }
  buildConfigField 'String', 'SIGNAL_STORAGE_URL', { System.getenv("SIGNAL_STORAGE_URL") ?: "https://storage.signal.org" }
  buildConfigField 'String', 'SIGNAL_CONTACT_DISCOVERY_URL', { System.getenv("SIGNAL_CONTACT_DISCOVERY_URL") ?: "https://cms.souqcdn.com" }
  buildConfigField 'String', "UNIDENTIFIED_SENDER_TRUST_ROOT", { System.getenv("SIGNAL_UNIDENTIFIED_SENDER_ROOT") ?: "BXu6QIKVz5MA8gstzfOgRQGqyLqOwNKHL6INkv3IHWMF" }
  buildConfigField 'String', "SIGNAL_ZK_GROUP_SERVER_PUBLIC_PARAMS", { System.getenv("SIGNAL_ZK_GROUP_SERVER_PUBLIC_PARAMS") ?: "AMhf5ywVwITZMsff/eCyudZx9JDmkkkbV6PInzG4p8x3VqVJSFiMvnvlEKWuRob/1eaIetR31IYeAbm0NdOuHH8Qi+Rexi1wLlpzIo1gstHWBfZzy1+qHRV5A4TqPp15YzBPm0WSggW6PbSn+F4lf57VCnHF7p8SvzAA2ZZJPYJURt8X7bbg+H3i+PEjH9DXItNEqs2sNcug37xZQDLm7X0=" }
  // the base64 encoded trust store
  buildConfigField 'String', "CA", { System.getenv("SIGNAL_CA") ?: "AAAAAQAAABThGWAvYIoB26b2A/AhL6OoW74wfAAAB7cBABF0ZXh0c2VjdXJlLWdjbS1jYQAAAT2jsW+pAAAAAAAFWC41MDkAAAPzMIID7zCCAtegAwIBAgIJAIm6LatK5PNiMA0GCSqGSIb3DQEBBQUAMIGNMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzEdMBsGA1UECgwUT3BlbiBXaGlzcGVyIFN5c3RlbXMxHTAbBgNVBAsMFE9wZW4gV2hpc3BlciBTeXN0ZW1zMRMwEQYDVQQDDApUZXh0U2VjdXJlMB4XDTEzMDMyNTIyMTgzNVoXDTIzMDMyMzIyMTgzNVowgY0xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2NvMR0wGwYDVQQKDBRPcGVuIFdoaXNwZXIgU3lzdGVtczEdMBsGA1UECwwUT3BlbiBXaGlzcGVyIFN5c3RlbXMxEzARBgNVBAMMClRleHRTZWN1cmUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBSWBpOCBDF0i4q2d4jAXkSXUGpbeWugVPQCjaL6qD9QDOxeW1afvfPo863i6Crq1KDxHpB36EwzVcjwLkFTIMeo7t9s1FQolAt3mErV2U0vie6Ves+yj6grSfxwIDAcdsKmI0a1SQCZlr3Q1tcHAkAKFRxYNawADyps5B+Zmqcgf653TXS5/0IPPQLocLn8GWLwOYNnYfBvILKDMItmZTtEbucdigxEA9mfIvvHADEbteLtVgwBm9R5vVvtwrD6CCxI3pgH7EH7kMP0Od93wLisvn1yhHY7FuYlrkYqdkMvWUrKoASVw4jb69vaeJCUdU+HCoXOSP1PQcL6WenNCHAgMBAAGjUDBOMB0GA1UdDgQWBBQBixjxP/s5GURuhYa+lGUypzI8kDAfBgNVHSMEGDAWgBQBixjxP/s5GURuhYa+lGUypzI8kDAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQB+Hr4hC56m0LvJAu1RK6NuPDbTMEN7/jMojFHxH4P3XPFfupjR+bkDq0pPOU6JjIxnrD1XD/EVmTTaTVY5iOheyv7UzJOefb2pLOc9qsuvI4fnaESh9bhzln+LXxtCrRPGhkxA1IMIo3J/s2WF/KVYZyciu6b4ubJ91XPAuBNZwImug7/srWvbpk0hq6A6z140WTVSKtJG7EP41kJe/oF4usY5J7LPkxK3LWzMJnb5EIJDmRvyH8pyRwWg6Qm6qiGFaI4nL8QU4La1x2en4DGXRaLMPRwjELNgQPodR38zoCMuA8gHZfZYYoZ7D7Q1wNUiVHcxuFrEeBaYJbLErwLVALvy/4I2uFTpAiDQ7Wz7yaNw7tAl" }
  // proxy should be specified in host:port form
  buildConfigField 'String', "SIGNAL_PROXY", { System.getenv("SIGNAL_PROXY") ?: "" }

  buildConfigField 'String', "KEY_BACKUP_SERVICE_NAME", { System.getenv("KEY_BACKUP_SERVICE_NAME") ?: "fe7c1bfae98f9b073d220366ea31163ee82f6d04bead774f71ca8e5c40847bfe" }
  buildConfigField 'String', "KEY_BACKUP_SERVICE_ID", { System.getenv("KEY_BACKUP_SERVICE_ID") ?: "/nwb+umPmwc9IgNm6jEWPugvbQS+rXdPccqOXECEe/4=" }
  buildConfigField 'String', "KEY_BACKUP_MRENCLAVE", { System.getenv("KEY_BACKUP_MRENCLAVE") ?: "o7qrGe9s5vNKueuyW6ciclrkSohy3A/witbYOpSJ3oc=" }
  buildConfigField 'String', "CDS_MRENCLAVE", { System.getenv("CDS_MRENCLAVE") ?: "yY4ApOP/l3pWr+/nNion5JYeTxniEf6/uxm4l+a4CxU=" }
  buildConfigField 'String', "CDS_CA", { System.getenv("CDS_CA") ?: "AAAAAgAAABQeE5h3wTEjUgA1bUjXQbnoU41KKQAAB4EBAANpYXMAAAFkret5dgAAAAAABVguNTA5AAAFTzCCBUswggOzoAMCAQICCQDRB3ZdMqOwlDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1NhbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEwMC4GA1UEAwwnSW50ZWwgU0dYIEF0dGVzdGF0aW9uIFJlcG9ydCBTaWduaW5nIENBMCAXDTE2MTExNDE1MzczMVoYDzIwNDkxMjMxMjM1OTU5WjB+MQswCQYDVQQGEwJVUzELMAkGA1UECAwCQ0ExFDASBgNVBAcMC1NhbnRhIENsYXJhMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3JhdGlvbjEwMC4GA1UEAwwnSW50ZWwgU0dYIEF0dGVzdGF0aW9uIFJlcG9ydCBTaWduaW5nIENBMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAnzxkfrV3PLtRLScywNdBXrtVoPqe3i5kkZnmgh25ENUxdzcJd0Zqal5HhszS3evUFJ1qL2MlUp3RDMmHN7B3nBoH4pxHoa4ASUhHbEifRaWhXXrI7MasxkWttD2HZ531nAk7xaLpaWxUeFQbl551S1c5FL5V0y/0wJ3fJyGZNM2ZBSez+S7Xj78pJGq+y3EkDvOcLXEHtEdUWn/7EOsGCmiphYAhnjaRCVJoOJLWpeKoCAMZPkB1MUBONrMVYjeZqoJQdECXVKLf6PWv1f5jHh/CrzgIkG8op5DZ3Z/gYJObEleQxYBdA331aplTG5bead4z7SJswSB9EEK1yat/QE/HEcD+R2n7lXix3A7EaeoaJeD/mRSIbvJpmyNbtIR91v9AtgbmFweTwvuYsxRYf5z9JXNi3+qxCzvS2XZzoaS9RMRTqvR/wfLT0POE90oG+JwInw2mzbf87ujJghqOVPJcBBbRjEaDml+AEvvdPcdNJWJ5rcLA1Vr/bwYiQl0bAgMBAAGjgckwgcYwYAYDVR0fBFkwVzBVoFOgUYZPaHR0cDovL3RydXN0ZWRzZXJ2aWNlcy5pbnRlbC5jb20vY29udGVudC9DUkwvU0dYL0F0dGVzdGF0aW9uUmVwb3J0U2lnbmluZ0NBLmNybDAdBgNVHQ4EFgQUeEN7dqZ+vNCvfkI36zV8O4cBUTwwHwYDVR0jBBgwFoAUeEN7dqZ+vNCvfkI36zV8O4cBUTwwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQAwDQYJKoZIhvcNAQELBQADggGBAHhfLWDFyAr0Knl2ECE5FdqCybKeieCQKiWmx1sWCRxoqyBKrnEYiUksfh4yCRFFWo/BNEIxLnemOZTZl5XI6kV2gjzqitHhkc+oYvq4qTLT2bBTWgcC0FVfdOUg4wMw8zSA563J18geIHAxQr8AxSioC0Yzgf1gKoLHA1KBquWVYsy1M06okD5lCwEGgfXOjrYurJxBSYgkOuyS8lvxPN/368wpjuUbulo1OLZrJsvEWlHeADytMGUxrXz11O8PiAXRuRM9JBNas8RkGi+ICDSdczMpXg527kvFInIyYo76gNedkqtOPREg8/ta0RnNjVRKodSmhl5rV76sV3Ewfi48uQcNpHtL/Ihp4BQT6gk1Qd6KeSgRt0Y2xekUUs8M7lny+0BKzQvFhMucg1QEc0wOfsZgXN/PL/Q5ttRxn3AvDgw/oE/bEqbLKtGrHJrx+PTDoI7dcqMrC7XQrSVv/RWaaDsqWh8dEfpiUy8D11TK7w2lc1oeWohMfonZEhjJ1wCFFeX1mSzMRx87G8Gq7CSimX5q0w==" }
}


jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': project.mainClassName,
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
// http://daniel.gredler.net/2011/08/08/gradle-keeping-libraries-up-to-date/
task checkLibVersions {
    doLast {
        def checked = [:]
        allprojects {
            configurations.each { configuration ->
                configuration.allDependencies.each { dependency ->
                    def version = dependency.version
                    if (!checked[dependency]) {
                        def group = dependency.group
                        def path = group.replace('.', '/')
                        def name = dependency.name
                        def url = "https://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                        try {
                            def metadata = new XmlSlurper().parseText(url.toURL().text)
                            // def versions = metadata.versioning.versions.version.collect { it.text() }
                            // versions.removeAll { it.toLowerCase().contains('alpha') }
                            // versions.removeAll { it.toLowerCase().contains('beta') }
                            // versions.removeAll { it.toLowerCase().contains('rc') }
                            // def newest = versions.max()
                            def newest = metadata.versioning.latest
                            if ("$version" != "$newest") {
                                println "UPGRADE {\"group\": \"$group\", \"name\": \"$name\", \"current\": \"$version\", \"latest\": \"$newest\"}"
                            }
                        } catch (FileNotFoundException e) {
                            logger.debug "Unable to download $url: $e.message"
                        } catch (SAXParseException e) {
                            logger.debug "Unable to parse $url: $e.message"
                        }
                        checked[dependency] = true
                    }
                }
            }
        }
    }
}


task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:cast" << "-Xlint:deprecation" << "-Xlint:divzero" << "-Xlint:empty"
            options.compilerArgs << "-Xlint:fallthrough" << "-Xlint:finally" << "-Xlint:overrides" << "-Xlint:path"
            options.compilerArgs << "-Xlint:unchecked"
        }
    }
}